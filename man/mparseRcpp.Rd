% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mparseRcpp.R
\name{mparseRcpp}
\alias{mparseRcpp}
\title{Parse custom model using \code{SimInf} style markup}
\usage{
mparseRcpp(transitions = NULL, compartments = NULL, pars = NULL,
  matchCrit = F, addVars = NULL, stopCrit = NULL, tspan = F,
  runFromR = T)
}
\arguments{
\item{transitions:}{character vector containing transitions on the form \code{"X ->
... -> Y"}. The left (right) side is the initial (final)
state and the propensity is written in between the
\code{->}-signs. The special symbol \code{@} is reserved for the empty
set. For example, \code{transitions = c("S -> k1*S*I -> I", "I ->
k2*I -> R")} expresses a SIR model.}

\item{compartments:}{contains the names of the involved compartments, for
example, \code{compartments = c("S", "I", "R")}.}

\item{pars:}{named vector of parameters.}

\item{matchCrit:}{\code{logical} determining whether to implement match criteria or not.}

\item{stopCrit:}{A \code{character} vector including additional stopping criteria for rejecting
simulations early. These will be inserted within \code{if(CRIT){out[0] = 0; return out;}} statements
within the underlying Rcpp code, which a return value of 0 corresponds to rejecting
the simulation. Variables in \code{CRIT} must match either those in \code{compartments}
and/or \code{addVars}.}

\item{addVars:}{a named vector where the names specify the additional variables and the
values specify the values of the variable. These can be used to specify variables 
that can be used for stopping criteria.}

\item{tspan:}{A \code{logical} determining whether to return time series counts or not.}

\item{runFromR:}{\code{logical} determining whether code is to be compiled to run directly in R,
or whether to be compiled as an \code{XPtr} object for use in Rcpp.}
}
\value{
An object of class \code{parsedRcpp}, which is essentially a \code{list} 
        containing elements:
        \itemize{
            \item{code:}{ parsed code to compile;}
            \item{matchCrit:}{ copy of \code{matchCrit} argument;}
            \item{stopCrit:}{ copy of \code{stopCrit} argument;}
            \item{addVars:}{ copy of \code{addVars} argument;}
            \item{tspan:}{ copy of \code{tspan} argument;}
            \item{runFromR:}{ copy of \code{runFromR} argument.}
        }
        This can be compiled into an \code{XPtr} or \code{function} object
        using \code{compileRcpp()}.
}
\description{
Parse custom model using \code{SimInf} style markup and 
create code to compile to an \code{XPtr} object to use in \code{ABCSMC} functions.
Does not have full functionality of \code{mparse}. Currently only supports
simulations on a single node.
}
