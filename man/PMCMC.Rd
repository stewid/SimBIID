% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PMCMC.R
\name{PMCMC}
\alias{PMCMC}
\title{Runs particle MCMC algorithm}
\usage{
PMCMC(data, priors, func, iniStates, iniPars = NA, tols = rep(0,
  ncol(data) - 1), whichind = NULL, fixpars = F, niter = 1000,
  npart = 100, nprintsum = 1000, nmultskip = 1000, adapt = T,
  propVar = NA, adaptmixprop = 0.05, nupdate = 100)
}
\arguments{
\item{data}{A \code{data.frame} containing time series count data, with the first column called
\code{time}, followed by columns of time-series counts.}

\item{priors}{A \code{data.frame} containing columns \code{parnames}, \code{dist}, \code{p1} and 
\code{p2}, with number of rows equal to the number of parameters. The column
\code{parname} simply gives names to each parameter for plotting and summarising.
Each entry in the \code{dist} column must contain one of \code{c("unif", "norm", "gamma")}, 
and the corresponding \code{p1} and \code{p2} entries relate to the hyperparameters 
(lower and upper bounds in the uniform case; mean and standard deviation in the 
normal case; and shape and rate in the gamma case).}

\item{func}{\code{XPtr} to simulation function. This function must take the following arguments
in order: 
\itemize{
\item{\code{NumericVector pars}:}{ a vector of parameters;}
\item{\code{double tstart}:}{ the start time;}
\item{\code{double tstop}:}{ the end time;}
\item{\code{IntegerVector u}:}{ a vector of states;}
\item{\code{IntegerVector tols}:}{ a vector of tolerances;}
\item{\code{IntegerVector counts}:}{ a vector of observed states;}
\item{\code{IntegerVector whichind}:}{ a vector the same length as \code{counts}, 
indicating which elements of \code{u} correspond to which elements of \code{counts}.
Must index from 0 NOT 1.}}}

\item{iniStates}{A numerical vector of initial states for the infectious disease model.}

\item{iniPars}{Vector of initial parameter values. If left unspecified, then these are 
sampled from the prior distributions.}

\item{tols}{Tolerances for matching data during ABC.}

\item{whichind}{Vector of which elements of \code{iniStates} match to columns \code{2:ncol(data)}
of `data`. If left as \code{NULL} then defaults to elements \code{1:length(iniStates)}
or returns an error.}

\item{fixpars}{A logical determining whether to fix the input parameters (useful for 
determining the variance of the marginal likelihood estimates).}

\item{niter}{An integer specifying the number of iterations to run the MCMC.}

\item{npart}{An integer specifying the number of particles for the alive particle filter.}

\item{nprintsum}{Prints summary of MCMC to screen every \code{nprintsum} iterations. 
Also defines how often adaptive scaling of proposal variances occur.}

\item{nmultskip}{Upper bound for how many simulations to run before rejecting proposal.}

\item{adapt}{Logical determining whether to use adaptive proposal or not.}

\item{propVar}{A numeric (npars x npars) matrix with log (or logistic) covariances to use
as (initial) proposal matrix. If left unspecified then defaults to 
\code{diag(nrow(priors)) * (0.1 ^ 2) / nrow(priors)}.}

\item{adaptmixprop}{Mixing proportion for adaptive proposal.}

\item{nupdate}{Controls when to start adaptive update.}
}
\value{
If the code throws an error, then it returns a missing value (\code{NA}). If 
        \code{fixpars = T} it returns a list of length 2 containing:
\itemize{
     \item{\code{output}}{ a matrix with two columns. The first contains the simulated
         log-likelihood, and the second is a binary indicator relating to whether the
         simulation was 'skipped' or not (1 = skipped, 0 = not skipped);}
     \item{\code{pars}}{ a vector of parameters used for the simulations.}
}
If \code{fixpars = F}, the routine returns a \code{PMCMC} object, essentially a 
         \code{list} containing:
\itemize{
 \item{\code{pars}}{an \code{mcmc} object containing posterior samples for the parameters;}
 \item{\code{tols}}{tolerances;}
 \item{\code{whichind}}{matching indicators;}
 \item{\code{iniStates}}{a vector of initial states for the infectious disease model;}
 \item{\code{skiprate}}{the cumulative skip rate;}
 \item{\code{accrate}}{the cumulative acceptance rate;}
 \item{\code{nmultskip}}{the chosen value of \code{nmultskip};}
 \item{\code{npart}}{the chosen number of particles;}
 \item{\code{time}}{the time taken to run the routine (in seconds);}
 \item{\code{propVar}}{the proposal covariance for the parameter updates;}
 \item{\code{data}}{data frame containing time series count data data, of form (group, count*);}
 \item{\code{priors}:}{ a copy of the \code{priors} input.}
}
}
\description{
Runs particle MCMC algorithm using alive particle filter for fitting 
             infectious disease models to time series count data
}
\details{
Function runs the alive particle filter for a given model. 
                     If running with \code{fixpars = T} then this runs \code{niter} simulations
                     using fixed parameter values. This can be used to optimise the number of 
                     particles after a training run.
}
